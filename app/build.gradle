plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'de.mannodermaus.android-junit5'
    id "io.gitlab.arturbosch.detekt"
    id 'kotlin-kapt'
}
apply from: '../shared_dependencies.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.kotlin.andi.cinema"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField "String", "API_KEY", "\"2c3d5d2d06555a01ea86522c230fc19a\""
        buildConfigField "String", "BASE_URL", "\"https://api.themoviedb.org/\""
        buildConfigField "String", "BASE_IMG_URL", "\"https://image.tmdb.org/t/p/w500/\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions{
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        viewBinding = true
    }
    //spek 2
    // Add Kotlin source directory to all source sets
    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    testOptions {
        unitTests.returnDefaultValues = true

        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
            jacocoOptions {
                // here goes all jacoco config, for example
                html.enabled = true
                xml.enabled = false
                csv.enabled = false
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
    dynamicFeatures = [':favorite']
}

detekt {
    failFast = true // fail build on any finding
    input = files("$projectDir")
    buildUponDefaultConfig = true // preconfigure defaults
    config = files("$projectDir/detekt/detekt.yml")
    // point to your custom config defining rules to run, overwriting default behavior
    baseline = file("$projectDir/detekt/baseline.xml")
    // a way of suppressing issues before introducing detekt

    reports {
        html {
            enabled = true // observe findings in your browser with structure and code snippets
            destination = file("$projectDir/detekt/report.html")
        }
        xml {
            enabled = true
            destination = file("$projectDir/detekt/report.xml")
        } // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true
        // similar to the console output, contains issue signature to manually edit baseline files
    }
}

dependencies {
    implementation project(":core")
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.core:core-ktx:$coreVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // detekt
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
    detekt "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:$detektVersion"
    // Leak Canary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
}
